/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { AppResponse } from '../model/models';
import { AppResponseCheckoutInfoDTOWithScheduleInfoDTO } from '../model/models';
import { BinCodeInfoRequest } from '../model/models';
import { BkmTokenFormBean } from '../model/models';
import { CardInfoBean } from '../model/models';
import { CartFormBean } from '../model/models';
import { CartSummaryFormBean } from '../model/models';
import { CheckoutAddressFormBean } from '../model/models';
import { CheckoutPaymentCreditCardFormBean } from '../model/models';
import { CheckoutPaymentFormBean } from '../model/models';
import { CheckoutScheduleFormBean } from '../model/models';
import { CouponFormBean } from '../model/models';
import { CreditCardRewardQueryBean } from '../model/models';
import { InstantDiscountFormBean } from '../model/models';
import { MasterpassPaymentFormBean } from '../model/models';
import { MasterpassTokenFormBean } from '../model/models';
import { MoneyPayPaymentFormBean } from '../model/models';
import { NewPaymentCheckoutBean } from '../model/models';
import { ServiceResponse } from '../model/models';
import { ServiceResponseBinCodeInfo } from '../model/models';
import { ServiceResponseCardInfo } from '../model/models';
import { ServiceResponseCartSummaryInfo } from '../model/models';
import { ServiceResponseCheckoutInfoDTO } from '../model/models';
import { ServiceResponseListCouponResultSummary } from '../model/models';
import { ServiceResponseListEnhancedBalanceInfoForCrm } from '../model/models';
import { ServiceResponseMapstringInstantDiscountInfo } from '../model/models';
import { ServiceResponseMapstringRewardInfo } from '../model/models';
import { ServiceResponseMasterpassTokenInfo } from '../model/models';
import { ServiceResponseOrderInfoDTO } from '../model/models';
import { ServiceResponseScheduleInfoDto } from '../model/models';
import { ServiceResponseVoucherInfo } from '../model/models';
import { ServiceResponsestring } from '../model/models';
import { VoucherFormBean } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class CheckoutRestControllerService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * addressCheckout
     * @param checkoutId checkoutId
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public addressCheckout(checkoutId: number, formBean: CheckoutAddressFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCheckoutInfoDTO>;
    public addressCheckout(checkoutId: number, formBean: CheckoutAddressFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCheckoutInfoDTO>>;
    public addressCheckout(checkoutId: number, formBean: CheckoutAddressFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCheckoutInfoDTO>>;
    public addressCheckout(checkoutId: number, formBean: CheckoutAddressFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling addressCheckout.');
        }
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling addressCheckout.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.put<ServiceResponseCheckoutInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/addresses`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addressCheckoutV2
     * @param checkoutId checkoutId
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addressCheckoutV2(checkoutId: number, formBean: CheckoutAddressFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<AppResponseCheckoutInfoDTOWithScheduleInfoDTO>;
    public addressCheckoutV2(checkoutId: number, formBean: CheckoutAddressFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<AppResponseCheckoutInfoDTOWithScheduleInfoDTO>>;
    public addressCheckoutV2(checkoutId: number, formBean: CheckoutAddressFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<AppResponseCheckoutInfoDTOWithScheduleInfoDTO>>;
    public addressCheckoutV2(checkoutId: number, formBean: CheckoutAddressFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling addressCheckoutV2.');
        }
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling addressCheckoutV2.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.put<AppResponseCheckoutInfoDTOWithScheduleInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/addresses/V2`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * balances
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public balances(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseListEnhancedBalanceInfoForCrm>;
    public balances(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseListEnhancedBalanceInfoForCrm>>;
    public balances(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseListEnhancedBalanceInfoForCrm>>;
    public balances(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling balances.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ServiceResponseListEnhancedBalanceInfoForCrm>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/balances`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * checkCardValidity
     * @param checkoutId checkoutId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkCardValidity(checkoutId: number, request: BinCodeInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseBinCodeInfo>;
    public checkCardValidity(checkoutId: number, request: BinCodeInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseBinCodeInfo>>;
    public checkCardValidity(checkoutId: number, request: BinCodeInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseBinCodeInfo>>;
    public checkCardValidity(checkoutId: number, request: BinCodeInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling checkCardValidity.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling checkCardValidity.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseBinCodeInfo>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/bin-codes/validate`,
            request,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * dryCoupon
     * @param checkoutId checkoutId
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dryCoupon(checkoutId: number, formBean: CouponFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<AppResponse>;
    public dryCoupon(checkoutId: number, formBean: CouponFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<AppResponse>>;
    public dryCoupon(checkoutId: number, formBean: CouponFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<AppResponse>>;
    public dryCoupon(checkoutId: number, formBean: CouponFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling dryCoupon.');
        }
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling dryCoupon.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<AppResponse>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/coupons`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * dryCoupons
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dryCoupons(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseListCouponResultSummary>;
    public dryCoupons(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseListCouponResultSummary>>;
    public dryCoupons(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseListCouponResultSummary>>;
    public dryCoupons(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling dryCoupons.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ServiceResponseListCouponResultSummary>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/coupons`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * dryVoucher
     * @param checkoutId checkoutId
     * @param voucherFormBean voucherFormBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dryVoucher(checkoutId: number, voucherFormBean: VoucherFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseVoucherInfo>;
    public dryVoucher(checkoutId: number, voucherFormBean: VoucherFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseVoucherInfo>>;
    public dryVoucher(checkoutId: number, voucherFormBean: VoucherFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseVoucherInfo>>;
    public dryVoucher(checkoutId: number, voucherFormBean: VoucherFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling dryVoucher.');
        }
        if (voucherFormBean === null || voucherFormBean === undefined) {
            throw new Error('Required parameter voucherFormBean was null or undefined when calling dryVoucher.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseVoucherInfo>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/vouchers`,
            voucherFormBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public get1(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCheckoutInfoDTO>;
    public get1(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCheckoutInfoDTO>>;
    public get1(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCheckoutInfoDTO>>;
    public get1(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling get1.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ServiceResponseCheckoutInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBkmToken
     * @param checkoutId checkoutId
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBkmToken(checkoutId: number, formBean: BkmTokenFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponse>;
    public getBkmToken(checkoutId: number, formBean: BkmTokenFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponse>>;
    public getBkmToken(checkoutId: number, formBean: BkmTokenFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponse>>;
    public getBkmToken(checkoutId: number, formBean: BkmTokenFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getBkmToken.');
        }
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling getBkmToken.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponse>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/token/bkm`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCardInfo
     * @param checkoutId checkoutId
     * @param bean bean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCardInfo(checkoutId: number, bean: CardInfoBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCardInfo>;
    public getCardInfo(checkoutId: number, bean: CardInfoBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCardInfo>>;
    public getCardInfo(checkoutId: number, bean: CardInfoBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCardInfo>>;
    public getCardInfo(checkoutId: number, bean: CardInfoBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getCardInfo.');
        }
        if (bean === null || bean === undefined) {
            throw new Error('Required parameter bean was null or undefined when calling getCardInfo.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseCardInfo>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/card-infos`,
            bean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCardRewards
     * @param checkoutId checkoutId
     * @param query query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public getCardRewards(checkoutId: number, query: CreditCardRewardQueryBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseMapstringRewardInfo>;
    public getCardRewards(checkoutId: number, query: CreditCardRewardQueryBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseMapstringRewardInfo>>;
    public getCardRewards(checkoutId: number, query: CreditCardRewardQueryBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseMapstringRewardInfo>>;
    public getCardRewards(checkoutId: number, query: CreditCardRewardQueryBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getCardRewards.');
        }
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling getCardRewards.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseMapstringRewardInfo>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/card-rewards`,
            query,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCartSummary
     * @param checkoutId checkoutId
     * @param bean bean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCartSummary(checkoutId: number, bean: CartSummaryFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCartSummaryInfo>;
    public getCartSummary(checkoutId: number, bean: CartSummaryFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCartSummaryInfo>>;
    public getCartSummary(checkoutId: number, bean: CartSummaryFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCartSummaryInfo>>;
    public getCartSummary(checkoutId: number, bean: CartSummaryFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getCartSummary.');
        }
        if (bean === null || bean === undefined) {
            throw new Error('Required parameter bean was null or undefined when calling getCartSummary.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseCartSummaryInfo>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/cart-summary`,
            bean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getInstantDiscounts
     * @param checkoutId checkoutId
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstantDiscounts(checkoutId: number, formBean: InstantDiscountFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseMapstringInstantDiscountInfo>;
    public getInstantDiscounts(checkoutId: number, formBean: InstantDiscountFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseMapstringInstantDiscountInfo>>;
    public getInstantDiscounts(checkoutId: number, formBean: InstantDiscountFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseMapstringInstantDiscountInfo>>;
    public getInstantDiscounts(checkoutId: number, formBean: InstantDiscountFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getInstantDiscounts.');
        }
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling getInstantDiscounts.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseMapstringInstantDiscountInfo>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/instant-discounts`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMasterpassAgreement
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMasterpassAgreement(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponsestring>;
    public getMasterpassAgreement(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponsestring>>;
    public getMasterpassAgreement(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponsestring>>;
    public getMasterpassAgreement(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getMasterpassAgreement.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ServiceResponsestring>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/agreements/masterpass`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMasterpassToken
     * @param checkoutId checkoutId
     * @param bean bean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMasterpassToken(checkoutId: number, bean: MasterpassTokenFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseMasterpassTokenInfo>;
    public getMasterpassToken(checkoutId: number, bean: MasterpassTokenFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseMasterpassTokenInfo>>;
    public getMasterpassToken(checkoutId: number, bean: MasterpassTokenFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseMasterpassTokenInfo>>;
    public getMasterpassToken(checkoutId: number, bean: MasterpassTokenFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getMasterpassToken.');
        }
        if (bean === null || bean === undefined) {
            throw new Error('Required parameter bean was null or undefined when calling getMasterpassToken.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseMasterpassTokenInfo>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/token/masterpass`,
            bean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOrderInfoByPolling
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrderInfoByPolling(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseOrderInfoDTO>;
    public getOrderInfoByPolling(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseOrderInfoDTO>>;
    public getOrderInfoByPolling(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseOrderInfoDTO>>;
    public getOrderInfoByPolling(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getOrderInfoByPolling.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseOrderInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/polling/order`,
            null,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getScheduleInfo
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public getScheduleInfo(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseScheduleInfoDto>;
    public getScheduleInfo(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseScheduleInfoDto>>;
    public getScheduleInfo(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseScheduleInfoDto>>;
    public getScheduleInfo(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getScheduleInfo.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ServiceResponseScheduleInfoDto>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/schedule-info`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTimetable
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public getTimetable(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponse>;
    public getTimetable(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponse>>;
    public getTimetable(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponse>>;
    public getTimetable(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getTimetable.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ServiceResponse>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/time-slots`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getV2
     * @param checkoutId checkoutId
     * @param step step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getV2(checkoutId: number, step: 'ADDRESS' | 'PAYMENT' | 'SCHEDULE' | 'SUCCESS', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCheckoutInfoDTO>;
    public getV2(checkoutId: number, step: 'ADDRESS' | 'PAYMENT' | 'SCHEDULE' | 'SUCCESS', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCheckoutInfoDTO>>;
    public getV2(checkoutId: number, step: 'ADDRESS' | 'PAYMENT' | 'SCHEDULE' | 'SUCCESS', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCheckoutInfoDTO>>;
    public getV2(checkoutId: number, step: 'ADDRESS' | 'PAYMENT' | 'SCHEDULE' | 'SUCCESS', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling getV2.');
        }
        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling getV2.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ServiceResponseCheckoutInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/steps/${encodeURIComponent(String(step))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * newCheckout
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newCheckout(formBean: CartFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCheckoutInfoDTO>;
    public newCheckout(formBean: CartFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCheckoutInfoDTO>>;
    public newCheckout(formBean: CartFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCheckoutInfoDTO>>;
    public newCheckout(formBean: CartFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling newCheckout.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseCheckoutInfoDTO>(`${this.configuration.basePath}/checkouts`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates new derived checkout (deprecated)
     * Use newDerivedCheckoutV2 instead
     * @param orderId orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public newDerivedCheckout(orderId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCheckoutInfoDTO>;
    public newDerivedCheckout(orderId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCheckoutInfoDTO>>;
    public newDerivedCheckout(orderId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCheckoutInfoDTO>>;
    public newDerivedCheckout(orderId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling newDerivedCheckout.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseCheckoutInfoDTO>(`${this.configuration.basePath}/checkouts/additional/${encodeURIComponent(String(orderId))}`,
            null,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates new derived checkout
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newDerivedCheckoutV2(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCheckoutInfoDTO>;
    public newDerivedCheckoutV2(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCheckoutInfoDTO>>;
    public newDerivedCheckoutV2(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCheckoutInfoDTO>>;
    public newDerivedCheckoutV2(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseCheckoutInfoDTO>(`${this.configuration.basePath}/checkouts/additionals`,
            null,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * newPaymentCheckout
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newPaymentCheckout(formBean: NewPaymentCheckoutBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponse>;
    public newPaymentCheckout(formBean: NewPaymentCheckoutBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponse>>;
    public newPaymentCheckout(formBean: NewPaymentCheckoutBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponse>>;
    public newPaymentCheckout(formBean: NewPaymentCheckoutBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling newPaymentCheckout.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponse>(`${this.configuration.basePath}/checkouts/steps/payment`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * purchaseBkm
     * @param checkoutId checkoutId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseBkm(checkoutId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseOrderInfoDTO>;
    public purchaseBkm(checkoutId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseOrderInfoDTO>>;
    public purchaseBkm(checkoutId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseOrderInfoDTO>>;
    public purchaseBkm(checkoutId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling purchaseBkm.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseOrderInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/purchase/online/bkm`,
            null,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * purchaseGarantiPay
     * @param checkoutId checkoutId
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseGarantiPay(checkoutId: number, formBean: CheckoutPaymentFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponse>;
    public purchaseGarantiPay(checkoutId: number, formBean: CheckoutPaymentFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponse>>;
    public purchaseGarantiPay(checkoutId: number, formBean: CheckoutPaymentFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponse>>;
    public purchaseGarantiPay(checkoutId: number, formBean: CheckoutPaymentFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling purchaseGarantiPay.');
        }
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling purchaseGarantiPay.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponse>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/purchase/online/garantipay`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * purchaseMasterpass
     * @param checkoutId checkoutId
     * @param bean bean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseMasterpass(checkoutId: number, bean: MasterpassPaymentFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseOrderInfoDTO>;
    public purchaseMasterpass(checkoutId: number, bean: MasterpassPaymentFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseOrderInfoDTO>>;
    public purchaseMasterpass(checkoutId: number, bean: MasterpassPaymentFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseOrderInfoDTO>>;
    public purchaseMasterpass(checkoutId: number, bean: MasterpassPaymentFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling purchaseMasterpass.');
        }
        if (bean === null || bean === undefined) {
            throw new Error('Required parameter bean was null or undefined when calling purchaseMasterpass.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseOrderInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/purchase/online/masterpass`,
            bean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * purchaseMoneyPay
     * @param checkoutId checkoutId
     * @param bean bean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseMoneyPay(checkoutId: number, bean: MoneyPayPaymentFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseOrderInfoDTO>;
    public purchaseMoneyPay(checkoutId: number, bean: MoneyPayPaymentFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseOrderInfoDTO>>;
    public purchaseMoneyPay(checkoutId: number, bean: MoneyPayPaymentFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseOrderInfoDTO>>;
    public purchaseMoneyPay(checkoutId: number, bean: MoneyPayPaymentFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling purchaseMoneyPay.');
        }
        if (bean === null || bean === undefined) {
            throw new Error('Required parameter bean was null or undefined when calling purchaseMoneyPay.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseOrderInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/purchase/online/moneypay`,
            bean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * purchaseOffline
     * @param checkoutId checkoutId
     * @param formBean formBean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseOffline(checkoutId: number, formBean: CheckoutPaymentFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseOrderInfoDTO>;
    public purchaseOffline(checkoutId: number, formBean: CheckoutPaymentFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseOrderInfoDTO>>;
    public purchaseOffline(checkoutId: number, formBean: CheckoutPaymentFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseOrderInfoDTO>>;
    public purchaseOffline(checkoutId: number, formBean: CheckoutPaymentFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling purchaseOffline.');
        }
        if (formBean === null || formBean === undefined) {
            throw new Error('Required parameter formBean was null or undefined when calling purchaseOffline.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponseOrderInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/purchase/offline`,
            formBean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * purchaseOnline
     * @param checkoutId checkoutId
     * @param bean bean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseOnline(checkoutId: number, bean: CheckoutPaymentCreditCardFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponse>;
    public purchaseOnline(checkoutId: number, bean: CheckoutPaymentCreditCardFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponse>>;
    public purchaseOnline(checkoutId: number, bean: CheckoutPaymentCreditCardFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponse>>;
    public purchaseOnline(checkoutId: number, bean: CheckoutPaymentCreditCardFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling purchaseOnline.');
        }
        if (bean === null || bean === undefined) {
            throw new Error('Required parameter bean was null or undefined when calling purchaseOnline.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<ServiceResponse>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/purchase/online/credit-card`,
            bean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * scheduleCheckout
     * @param checkoutId checkoutId
     * @param bean bean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleCheckout(checkoutId: number, bean: CheckoutScheduleFormBean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<ServiceResponseCheckoutInfoDTO>;
    public scheduleCheckout(checkoutId: number, bean: CheckoutScheduleFormBean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<ServiceResponseCheckoutInfoDTO>>;
    public scheduleCheckout(checkoutId: number, bean: CheckoutScheduleFormBean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<ServiceResponseCheckoutInfoDTO>>;
    public scheduleCheckout(checkoutId: number, bean: CheckoutScheduleFormBean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {
        if (checkoutId === null || checkoutId === undefined) {
            throw new Error('Required parameter checkoutId was null or undefined when calling scheduleCheckout.');
        }
        if (bean === null || bean === undefined) {
            throw new Error('Required parameter bean was null or undefined when calling scheduleCheckout.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.put<ServiceResponseCheckoutInfoDTO>(`${this.configuration.basePath}/checkouts/${encodeURIComponent(String(checkoutId))}/schedule`,
            bean,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
