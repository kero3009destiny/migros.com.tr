/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { AppResponseSearchAutoCompleteResultDTO } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ProductSearchAutoCompleteRestControllerService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * getProductSearchAutoCompleteResult
     * @param q 
     * @param kategoriler 
     * @param markalar Used for filtering by brand
     * @param indirim 
     * @param ozelBeslenme 
     * @param sort 
     * @param page 
     * @param pageSize 
     * @param brandId Used for brand pages
     * @param categoryId Used for category pages
     * @param shoppinglistId Used for shopping list pages
     * @param discountType 
     * @param discountTypeId 
     * @param hideStockOuts 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductSearchAutoCompleteResult(q?: string, kategoriler?: number, markalar?: number, indirim?: string, ozelBeslenme?: string, sort?: string, page?: number, pageSize?: number, brandId?: number, categoryId?: number, shoppinglistId?: number, discountType?: string, discountTypeId?: number, hideStockOuts?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<AppResponseSearchAutoCompleteResultDTO>;
    public getProductSearchAutoCompleteResult(q?: string, kategoriler?: number, markalar?: number, indirim?: string, ozelBeslenme?: string, sort?: string, page?: number, pageSize?: number, brandId?: number, categoryId?: number, shoppinglistId?: number, discountType?: string, discountTypeId?: number, hideStockOuts?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<AppResponseSearchAutoCompleteResultDTO>>;
    public getProductSearchAutoCompleteResult(q?: string, kategoriler?: number, markalar?: number, indirim?: string, ozelBeslenme?: string, sort?: string, page?: number, pageSize?: number, brandId?: number, categoryId?: number, shoppinglistId?: number, discountType?: string, discountTypeId?: number, hideStockOuts?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<AppResponseSearchAutoCompleteResultDTO>>;
    public getProductSearchAutoCompleteResult(q?: string, kategoriler?: number, markalar?: number, indirim?: string, ozelBeslenme?: string, sort?: string, page?: number, pageSize?: number, brandId?: number, categoryId?: number, shoppinglistId?: number, discountType?: string, discountTypeId?: number, hideStockOuts?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (q !== undefined && q !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>q, 'q');
        }
        if (kategoriler !== undefined && kategoriler !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>kategoriler, 'kategoriler');
        }
        if (markalar !== undefined && markalar !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>markalar, 'markalar');
        }
        if (indirim !== undefined && indirim !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>indirim, 'indirim');
        }
        if (ozelBeslenme !== undefined && ozelBeslenme !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>ozelBeslenme, 'ozel-beslenme');
        }
        if (sort !== undefined && sort !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>sort, 'sort');
        }
        if (page !== undefined && page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>page, 'page');
        }
        if (pageSize !== undefined && pageSize !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pageSize, 'page-size');
        }
        if (brandId !== undefined && brandId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>brandId, 'brand-id');
        }
        if (categoryId !== undefined && categoryId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>categoryId, 'category-id');
        }
        if (shoppinglistId !== undefined && shoppinglistId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>shoppinglistId, 'shoppinglist-id');
        }
        if (discountType !== undefined && discountType !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>discountType, 'discount-type');
        }
        if (discountTypeId !== undefined && discountTypeId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>discountTypeId, 'discount-type-id');
        }
        if (hideStockOuts !== undefined && hideStockOuts !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>hideStockOuts, 'hide-stock-outs');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<AppResponseSearchAutoCompleteResultDTO>(`${this.configuration.basePath}/search/auto-complete/products`,
            {
                params: queryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
